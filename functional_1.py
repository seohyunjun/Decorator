# Functional
## 함수형 프로그래밍은 입력을 받은 상태를 유지하거나 반환값에 반영되지 않은 것을 수정하지 않고 출력을 생성한다.
## 이를 pure function(순수 함수)라 한다.

# <리스트의 마지막 항목을 제거하는 함수 예시>
def remove_last_item(mylist):
    """리스트에서 마지막 항목을 제거한다."""
    mylist.pop(-1) # mylist를 수정한다.
    
k = [1,2,3]
remove_last_item(k)
print(k) # [1,2]

# <리스트의 마지막 항목을 제거하는 순수 함수 예시>
def butlast(mylist):
    """마지막 항목 제거"""
    return mylist[:-1] # mylist 내용을 반환

k = [1,2,3]
butlast(k)

## 함수형 프로그래밍의 장점

### 모듈성
# 함수형 스타일로 코드를 작성하면, 코드의 각 부분이 개별 문제를 해결하는 데 적합하도록 어느 정도 분리된다. 재사용 가능, 외부 변수나 상태에 의존하지 않기 떄문에 다른 코드에서 호출하는 것이 간단하다.

### 간결성
# 함수형 프로그래밍은 다른 패러다임보다 장황한 내용이 적은 경우가 많다.

### 동시성
# 순수함수는 스레드가 안전하며 동시에 실행할 수 있다. 

### 시험성
# 함수형 프로그램을 테스트하기 매우 쉽다. 함수형 프로그래밍은 멱등성(idempotent)을 갖는다.
# 멱등성 : 동일한 인수를 통해 동일한 함수를 호출하는 것이 항상 동일한 결과 반환 

 
